use boats::{input_2, quadratic_diff, read_input, Boats, ChargeBoat};
use criterion::{black_box, criterion_group, criterion_main, Criterion};
use day_6::*;

fn criterion_benchmark(c: &mut Criterion) {
    // Setup: create a Boats instance and some test inputs
    fn process_boats() -> (i64, i64) {
        let test_input = include_str!("../src/races.txt");
        let mut boats = Boats {
            button_time: vec![],
        };
        let mut boats_2 = Boats {
            button_time: vec![],
        };
        let time_list: &str = test_input
            .split('\n')
            .next()
            .expect("Invalid test input")
            .strip_prefix("Time: ")
            .expect("Incorrect prefix");
        let distance_list: &str = test_input
            .split('\n')
            .nth(1)
            .expect("Invalid distance input")
            .strip_prefix("Distance: ")
            .expect("Incorrect prefix");

        let input_vec = read_input(time_list, distance_list);
        let part2_vec = input_2(time_list, distance_list);

        for (time, distance) in &input_vec {
            ChargeBoat::charge_button(&mut boats, distance, time);
        }
        ChargeBoat::charge_button(&mut boats_2, &part2_vec[0].1, &part2_vec[0].0);

        let product1 = boats.button_time.iter().product::<i64>();
        let product2 = boats_2.button_time.iter().product::<i64>();

        (product1, product2)
    }

    // Benchmark the charge_button function
    fn criterion_benchmark(c: &mut Criterion) {
    c.bench_function("process_boats", |b| {
        b.iter(|| {
            black_box(process_boats());
        })
    });
}}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);
